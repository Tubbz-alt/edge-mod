define([
    "intern!object",
    "intern/chai!assert",
    "knockout",
    "common/identity"
], function (registerSuite, assert, ko, Identity) {
    "use strict";

    var name1 = "test-org";
    var uuid = "54163ff2-9431-4eb0-a4ea-5e41500d30d4";
    var it = "IT";

    function getJSON(url, obj, success, error) {
        console.log(arguments);
        return {};
    }

    var crmFindData = {
        UUID: uuid,
        name: name1
    };

    var crmCompleteData = {
        UUID: uuid,
        name: name1,
        industry: it
    };

    var crmKBData = {
        name: uuid,
        roles: null,
        specification: {
            organisation_info: it
        }
    };

    var externalkBData = {
        name: "test_org2",
        roles: null,
        specification: {
            organisation_info: it
        }
    };


    return registerSuite(function () {

        return {
            name: "common/identity",
            "load data": {
                "it will populate non-crm identities correctly": function () {
                    var identity = new Identity();

                    //given crm returns

                    //when
                    //identity.load(externalkBData);

                    //assert
                 /*   assert.equal(identity.sector, it, 'should load sector correctly');
                    assert.equal(identity.UUID, "test-org2", 'should load the stored name as the UUID');
                    assert.equal(identity.name, "test_org2", 'should load the name');       */
                },
        /*        "it will load crm identities correctly": function () {
                    var identity = new Identity();

                    //given crm returns

                    //when
                    identity.load(crmKBData);

                    //assert
                    assert.equal(identity.sector, it, 'should load sector correctly');
                    assert.equal(identity.UUID, uuid, 'should load the stored UUID');
                    assert.equal(identity.name, name1, 'should load the name from the crm');
                },
                "name will default to UUID if can't retrieve from CRM ": function () {
                    var identity = new Identity();

                    //given crm returns

                    //when
                    identity.load(crmKBData);

                    //assert
                    assert.equal(identity.sector, it, 'should load sector correctly');
                    assert.equal(identity.UUID, uuid, 'should load the stored UUID');
                    assert.equal(identity.name, uuid, 'should load the uuid as the name on failing to get data from the crm');
                }   */
            }
        }
    });
});
