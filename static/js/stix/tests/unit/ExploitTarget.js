define([
    "intern!object",
    "intern/chai!assert",
    "stix/ReviewValue",
    "stix/StixPackage",
    "stix/ExploitTarget",
    "stix/CourseOfAction",
    "intern/dojo/text!./data/ExploitTarget_package_01.json",
    "stix/tests/unit/CreateEdges"
], function (registerSuite, assert, ReviewValue, StixPackage, ExploitTarget, CourseOfAction, package01, CreateEdges) {
    "use strict";

    // statics go here
    var packageData = Object.freeze({
        "pss:tgt-b0562c5a-1ae4-4b77-b075-32f59689e890": Object.freeze(JSON.parse(package01))
    });

    return registerSuite(function () {

        // suite variables go here
        var stixPackage = null;
        var classUnderTest = null;

        function loadPackage(rootId) {
            stixPackage = new StixPackage(packageData[rootId], rootId, [], {},
                CreateEdges.createEdges([
                    "pss:tgt-b0562c5a-1ae4-4b77-b075-32f59689e890",
                    "pss:et-236d204b-7987-4b28-9119-900585956290",
                    "pss:coa-5a5e5ffd-7435-45c1-afbc-9abada9b0f1e"
                ]));
            classUnderTest = stixPackage.root;
        }

        return {
            name: "stix/ExploitTarget",
            "valid package": {
                setup: function () {
                    loadPackage("pss:tgt-b0562c5a-1ae4-4b77-b075-32f59689e890");
                },
                "returns non-null": function () {
                    assert.isNotNull(classUnderTest);
                },
                "has correct id": function () {
                    assert.equal(classUnderTest.id, "pss:tgt-b0562c5a-1ae4-4b77-b075-32f59689e890");
                },
                "has correct title": function () {
                    var actual = classUnderTest.title();
                    assert.instanceOf(actual, ReviewValue);
                    assert.isFalse(actual.isEmpty);
                    assert.equal(actual.value, "Test Target");
                },
                "has correct short description": function () {
                    var actual = classUnderTest.shortDescription();
                    assert.instanceOf(actual, ReviewValue);
                    assert.isFalse(actual.isEmpty);
                    assert.equal(actual.value, "short description");
                },
                "has correct description": function () {
                    var actual = classUnderTest.description();
                    assert.instanceOf(actual, ReviewValue);
                    assert.isFalse(actual.isEmpty);
                    assert.equal(actual.value, "long description");
                },
                "has correct TLP": function () {
                    var actual = classUnderTest.tlp();
                    assert.instanceOf(actual, ReviewValue);
                    assert.isFalse(actual.isEmpty);
                    assert.equal(actual.value, "WHITE");
                },
                "has correct vulnerabilites": function () {
                    var actual = classUnderTest.vulnerabilities();
                    assert.instanceOf(actual, ReviewValue);
                    assert.isFalse(actual.isEmpty);
                    assert.equal(actual.value, "vulnerability 1");
                },
                "has correct weaknesses, with concat cwe id": function () {
                    var actual = classUnderTest.weaknesses();
                    assert.instanceOf(actual, ReviewValue);
                    assert.isFalse(actual.isEmpty);
                    assert.equal(actual.value, "Weakness1(CWE-1)");
                },
                "has correct information source": function () {
                    var actual = classUnderTest.informationSource();
                    assert.instanceOf(actual, ReviewValue);
                    assert.isFalse(actual.isEmpty);
                    assert.equal(actual.value, "Information source 1");
                },
                "has correct related targets": function () {
                    var actual = classUnderTest.relatedTargets();
                    assert.instanceOf(actual, ReviewValue);
                    assert.isFalse(actual.isEmpty);
                    var actualRelatedTargets = actual.value;
                    assert.isArray(actualRelatedTargets);
                    assert.lengthOf(actualRelatedTargets, 1);
                    var actualRelatedTarget = actualRelatedTargets[0];
                    assert.instanceOf(actualRelatedTarget, ExploitTarget);
                    assert.equal(actualRelatedTarget.id, "pss:et-236d204b-7987-4b28-9119-900585956290")
                },
                "has correct potential COAs": function () {
                    var actual = classUnderTest.potentialCOAs();
                    assert.instanceOf(actual, ReviewValue);
                    assert.isFalse(actual.isEmpty);
                    var actualRelatedTargets = actual.value;
                    assert.isArray(actualRelatedTargets);
                    assert.lengthOf(actualRelatedTargets, 1);
                    var actualRelatedTarget = actualRelatedTargets[0];
                    assert.instanceOf(actualRelatedTarget, CourseOfAction);
                    assert.equal(actualRelatedTarget.id, "pss:coa-5a5e5ffd-7435-45c1-afbc-9abada9b0f1e")
                }
            }
        }
    });
});

